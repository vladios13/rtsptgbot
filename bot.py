import logging
import os
import socket

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ChatActions

import ffmpeg
from ffmpeg import Error as FFmpegError

from datetime import datetime
from pytz import timezone

from config import TOKEN, CAM_1, RTSP_PING

logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger.info("Starting bot")


# –ß–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ip-–∞–¥—Ä–µ—Å–∞
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.settimeout(2)      #2 Second Timeout
result = sock.connect_ex((RTSP_PING, 558))


# Snap –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_snap_keyboard():
    kb_contents = [
        [
            types.InlineKeyboardButton(text="–ö–∞–º–µ—Ä–∞ ‚Ññ 1", callback_data="snap1"),
        ]
            
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb_contents)


# Gif –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_gif_keyboard():
    kb_contents = [
        [
            types.InlineKeyboardButton(text="–ö–∞–º–µ—Ä–∞ ‚Ññ 1", callback_data="gif1"),
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb_contents)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer("üëã")
    await message.answer(
        f"‚Ñπ <i> Telegram-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å <b>RTSP</b>-–∫–∞–º–µ—Ä–∞–º–∏.</i>\n"
        f"–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help. \n\n"
        f"üßë‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @vladios13blog\nüîß –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–æ—Ç–∞: <a href='https://github.com/aiogram/aiogram'>Aiogram</a>.",
        disable_web_page_preview=True)


# –∫–æ–º–∞–Ω–¥–∞ "help"
@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply(
        f"<b>–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:</b> \n\n"
        f"üì∑ <b>–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:</b> /s\n"
        f"üìπ <b>–ü–æ–ª—É—á–∏—Ç—å Gif:</b> /g\n"
        f"üåê <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞:</b> /p"
    )


# –ø–∏–Ω–≥—É–µ–º –ø–æ—Ä—Ç
@dp.message_handler(commands=['ping', 'p'])
async def process_ping_command(message: types.Message):
    if result == 0:
        await message.answer('‚úÖ Ping —É—Å–ø–µ—à–µ–Ω')
    else:
        await message.answer('‚ùå Ping –Ω–µ —É—Å–ø–µ—à–µ–Ω')


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
@dp.message_handler(commands=['snap', 's'])
async def process_snap_command(message: types.Message):
    text_info = ("üì∑ –ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∫–∞–º–µ—Ä—ã:")
    await message.reply(text_info, reply_markup=get_snap_keyboard())


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ Gif —Ñ–∞–π–ª–æ–≤
@dp.message_handler(commands=['gif', 'g'])
async def process_gif_command(message: types.Message):
    text_info = ("üìπ –ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å GIF:\n\n<i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5 —Å–µ–∫.</i>")
    await message.reply(text_info, reply_markup=get_gif_keyboard())


@dp.callback_query_handler(text="snap1")
async def send_snap_1_value(call: types.CallbackQuery):
    try:
        nowMSK = datetime.now(timezone('Europe/Moscow'))
        caption = datetime.now().strftime('%H:%M:%S')
        nowOut = nowMSK.strftime("snap-%d-%m-%Y-%H-%M-%S.jpg")
        process = (
            ffmpeg
            .input(CAM_1, rtsp_transport="tcp", vsync="2")
            .output(nowOut, vframes="1")
            .run(capture_stderr=True)
        )
        await call.answer()
        await call.message.answer_photo(types.InputFile(nowOut), caption="<b>–§–æ—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:</b> " + str(caption), reply_markup=get_snap_keyboard())
    except FFmpegError as _ex:
        if "Connection refused" in _ex.stderr.decode('utf8'):
            await call.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–º–µ—Ä–µ:\n\n<code>Connection refused</code>")
        elif "401" in _ex.stderr.decode('utf8'):
            await call.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–º–µ—Ä–µ:\n\n<code>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å</code>")
    os.remove(nowOut)


@dp.callback_query_handler(text="gif1")
async def send_gif_1_value(call: types.CallbackQuery):
    try:
        await bot.send_chat_action(call.from_user.id, ChatActions.RECORD_VIDEO)
        text_gif = ("‚è≥ <b>–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∫–∞–º–µ—Ä–µ:</b> \n<i>–ó–∞–ø–∏—Å—å GIF –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è....</i>")
        msg = await call.message.answer(text_gif)
        nowMSK = datetime.now(timezone('Europe/Moscow'))
        caption = datetime.now().strftime('%H:%M:%S')
        nowOut = nowMSK.strftime("gif-%d-%m-%Y-%H-%M-%S.mp4")
        process = (
            ffmpeg
            .input(CAM_1, rtsp_transport="tcp", vsync="2")
            .output(nowOut, crf=40, pix_fmt='yuv420p', preset='ultrafast', vcodec='copy', t=5)
            .run(capture_stderr=True)
        )
        await msg.delete()
        await call.message.answer_animation(types.InputFile(nowOut), caption="GIF –∑–∞–ø–∏—Å–∞–Ω: " + str(caption), reply_markup=get_gif_keyboard())
        await call.answer()
    except FFmpegError as _ex:
        if "Connection refused" in _ex.stderr.decode('utf8'):
            await call.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–º–µ—Ä–µ:\n\n<code>Connection refused</code>")
        elif "401" in _ex.stderr.decode('utf8'):
            await call.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–º–µ—Ä–µ:\n\n<code>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å</code>")
    os.remove(nowOut)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
